generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  fullName      String
  email         String   @unique
  passwordHash  String
  userType      String
  isLawApproved Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  profile Profile?
  roles   UserRole[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  phone     String
  location  String
  gender    String
  biography String
  photoUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  deletedAt DateTime?
  deletedBy String?

  user                User                @relation(fields: [userId], references: [id])
  businesses          Business[]         @relation("ProfileBusinesses")
  appointments        Appointment[]      @relation("ProfileAppointments")
  favorites           Favorite[]         @relation("ProfileFavorites")

  @@map("profiles")
}


model Role {
  id    String     @id @default(uuid())
  name  String     @unique
  users UserRole[]

  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?


  @@map("roles")
}

model UserRole {
  userId String
  roleId String
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?


  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Business {
  id              String   @id @default(uuid())
  ownerId         String
  name            String
  description     String
  address         String
  city            String?
  district        String?
  postalCode      String?
  website         String? 
  latitude        Decimal
  longitude       Decimal
  phone           String
  profileImageUrl String
  coverImageUrl   String?
  businessTypeId  String
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)
  deletedAt       DateTime?
  deletedBy       String?

  owner           Profile            @relation("ProfileBusinesses", fields: [ownerId], references: [id])
  businessType    BusinessType       @relation(fields: [businessTypeId], references: [id])
  contacts        BusinessContact[]
  campaigns       BusinessCampaign[]
  workers         BusinessWorker[]
  services        Service[]
  appointments    Appointment[]
  shifts          BusinessShift[]
  favorites       Favorite[]         @relation("BusinessFavorites")
  portfolios      Portfolio[]

  @@map("businesses")
}


model BusinessType {
  id         String     @id @default(uuid())
  name       String
  businesses Business[]
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  @@map("business_types")
}

model BusinessContact {
  id           String @id @default(uuid())
  businessId   String
  contactName  String
  contactValue String
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  business Business @relation(fields: [businessId], references: [id])

  @@map("business_contacts")
}

model BusinessCampaign {
  id          String  @id @default(uuid())
  businessId  String
  name        String
  price       Decimal
  description String
  timeRange   String
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  business     Business      @relation(fields: [businessId], references: [id])
  appointments Appointment[]

  @@map("business_campaigns")
}

model WorkerType {
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  id      String           @id @default(uuid())
  name    String
  workers BusinessWorker[]

  @@map("worker_types")
}

model BusinessWorker {
  id            String      @id @default(uuid())
  businessId    String
  workerTypeId  String
  firstName     String
  lastName      String
  email         String
  phone         String
  isDeleted     Boolean     @default(false)
  deletedAt     DateTime?
  deletedBy     String?

  business      Business    @relation(fields: [businessId], references: [id])
  workerType    WorkerType  @relation(fields: [workerTypeId], references: [id])
  appointments  Appointment[]
  serviceWorkers ServiceWorker[]

  @@map("business_workers")
}



model Service {

  id              String   @id @default(uuid())
  businessId      String
  name            String
  description     String
  durationMinutes Int
  price           Decimal
  category        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  business            Business             @relation(fields: [businessId], references: [id])
  appointmentServices AppointmentService[]
  serviceWorkers ServiceWorker[]

  @@map("services")
}

model ServiceWorker {
  id         String   @id @default(uuid())
  serviceId  String
  workerId   String
  isDeleted  Boolean  @default(false)
  deletedAt  DateTime?
  deletedBy  String?

  service    Service        @relation(fields: [serviceId], references: [id])
  worker     BusinessWorker @relation(fields: [workerId], references: [id])

  @@unique([serviceId, workerId]) 
  @@map("service_workers")
}

model Appointment {
  id              String   @id @default(uuid())
  customerId      String
  businessId      String
  workerId        String
  appointmentTime DateTime
  status          String
  totalPrice      Decimal
  campaignId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)
  deletedAt       DateTime?
  deletedBy       String?

  customer        Profile              @relation("ProfileAppointments", fields: [customerId], references: [id])
  business        Business             @relation(fields: [businessId], references: [id])
  worker          BusinessWorker       @relation(fields: [workerId], references: [id])
  campaign        BusinessCampaign?    @relation(fields: [campaignId], references: [id])
  appointmentServices AppointmentService[]
  review          Review?

  @@map("appointments")
}

model AppointmentService {

  id                String  @id @default(uuid())
  appointmentId     String
  serviceId         String
  priceAtBooking    Decimal
  durationAtBooking Int
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])

  @@map("appointment_services")
}

model ShiftTime {
  id        String   @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  isActive  Boolean  @default(true) 
  isDeleted Boolean  @default(false)
  deletedAt DateTime?
  deletedBy String?

  businessShifts BusinessShift[]

  @@map("shift_times")
}


model BusinessShift {
  id          String @id @default(uuid())
  businessId  String
  shiftTimeId String
  dayOfWeek   Int
  isActive    Boolean @default(true) 
  isDeleted   Boolean @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  business  Business  @relation(fields: [businessId], references: [id])
  shiftTime ShiftTime @relation(fields: [shiftTimeId], references: [id])

  @@map("business_shifts")
}


model Review {
  id             String   @id @default(uuid())
  appointmentId  String   @unique
  rating         Int
  comment        String
  createdAt      DateTime @default(now())
  isDeleted      Boolean  @default(false)
  deletedAt      DateTime?
  deletedBy      String?

  appointment    Appointment @relation(fields: [appointmentId], references: [id])

  @@map("reviews")
}


model Favorite {
  id         String   @id @default(uuid())
  customerId String
  businessId String
  createdAt  DateTime @default(now())
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  customer Profile  @relation("ProfileFavorites", fields: [customerId], references: [id])
  business Business @relation("BusinessFavorites", fields: [businessId], references: [id])

  @@map("favorites")
}

model Portfolio {
  id          String   @id @default(uuid())
  businessId  String
  imageUrl    String
  description String
  uploadedAt  DateTime @default(now())
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  business Business @relation(fields: [businessId], references: [id])

  @@map("portfolios")
}